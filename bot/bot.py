import configparser
import json
import asyncio
from os import path

import aiohttp
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from loguru import logger

config = configparser.ConfigParser()
config.read(path.join(path.dirname(path.abspath(__file__)), 'config.ini'))
URL = config['Django']['url']
API_TOKEN = config['Telegram']['token']

bot = AsyncTeleBot(API_TOKEN)

news_filters = ['–ò–¢', '–î–∏–∑–∞–π–Ω', '–ë–∏–∑–Ω–µ—Å', '–ò–≥—Ä—ã', '–ù–æ–≤–æ—Å—Ç–∏', "–ë–ª–æ–≥–∏", "–ü—Ä–æ–¥–∞–∂–∏", "–ú—É–∑—ã–∫–∞","–ü–æ–∑–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ", "–¶–∏—Ç–∞—Ç—ã"]
user_filters = {}
markup_button = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
itembtn1 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã')
itembtn2 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏')
markup_button.add(itembtn1, itembtn2)


@bot.message_handler(commands=['start'])
async def start(message):
    '''–ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    async with aiohttp.ClientSession() as session:
        async with session.get(f'{URL}/api/user/{user_id}') as response:
            if response.status == 200:
                text = ('–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É!\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π: /changefilters')
                await bot.send_message(message.chat.id, text)
                return await send_news(message)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    markup = types.InlineKeyboardMarkup(row_width=3)
    for _filter in news_filters:
        markup.add(types.InlineKeyboardButton(_filter, callback_data=_filter))
    markup.add(types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='complete'))
    text = (
        '–ü—Ä–∏–≤–µ—Ç! –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ Telegram? –°–ª–æ–∂–Ω–æ —ç—Ç–æ –≤—Å—ë —á–∏—Ç–∞—Ç—å, –ø–æ–Ω–∏–º–∞—é. '
        '–Ø —Ç—É—Ç, –∫—Å—Ç–∞—Ç–∏ –∫–∞–∫ —Ä–∞–∑ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —ç—Ç–æ–º. –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–∏–º–∏ –≤–∫—É—Å–∞–º–∏. '
        '–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è (–∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—à—å—Å—è, –Ω–∞–∂–º–∏ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª):'
    )
    await bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=['help'])
async def help(message):
    text = (
        '–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ: /changefilters ‚Äî —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∏ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –∏—Ö. '
        '–ö–∞–∫ —Å—Ç–æ–ª—å–∫–æ —Ç—ã —Å—Ç–∞–≤–∏—à—å ‚ù§ –∏–ª–∏ üëéüèª –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ—Å—Ç—É, —è –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ –Ω–æ–≤—ã–π.'
    )
    await bot.send_message(message.chat.id, text)


@bot.callback_query_handler(func=lambda call: call.data in news_filters)
async def filter_click_inline(call):
    '''–°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    choosen_filter = call.data
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.id

    try:
        existing_filters = user_filters[user_id]
    except KeyError:
        event_type = 'append'
        user_filters[user_id] = [choosen_filter]
    else:
        if choosen_filter in existing_filters:
            event_type = 'remove'
            existing_filters.remove(choosen_filter)
        else:
            event_type = 'append'
            existing_filters.append(choosen_filter)
        user_filters[user_id] = existing_filters

    markup = call.message.reply_markup
    for i, row in enumerate(markup.keyboard):
        l = 0
        try:
            filter_button = next(btn for btn in row if btn.callback_data == choosen_filter)
        except StopIteration:
            continue
        else:
            for btn in row:
                
                if btn.callback_data == choosen_filter:                   
                    if event_type == 'append':
                        filter_button.text = f'{choosen_filter} ‚úÖ'
                    elif event_type == 'remove':
                        filter_button.text = f'{choosen_filter} ‚ùé'
                    row[l]=filter_button
                l+=1
            markup.keyboard[i] = row
            break


    await bot.edit_message_reply_markup(
        chat_id=chat_id,
        message_id=message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'complete')
async def complete_click_inline(call):
    '''–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'''
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.id

    if not user_filters.get(user_id):
        return await bot.answer_callback_query(call.id, '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!')

    data = {
        'id': user_id,
        'filters': user_filters[user_id]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url=f'{URL}/api/user/', json=data) as response:
            if response.status == 201:
                await bot.answer_callback_query(call.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
                await bot.delete_message(chat_id, message_id)
                text = (
                    '–û—Ç–ª–∏—á–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã! –¢–∞–∫ —è –±—É–¥—É –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è. '
                    '–¢–µ–ø–µ—Ä—å, —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø–æ—Å—Ç—ã, –∞ —Ç—ã –∏—Ö –æ—Ü–µ–Ω–∏–≤–∞—Ç—å, —è –ø—Ä–∏—Å—ã–ª–∞—Ç—å, –∞ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞—Ç—å, —è –ø—Ä–∏—Å—ã–ª–∞—Ç—å... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. '
                    '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∑–∞—Ä—É—á–∏—Ç—å—Å—è –º–æ–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –Ω–∞–ø–∏—Å–∞–≤ /help'
                )
                await bot.send_message(call.from_user.id, text)
                await send_news(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith('like'))
async def on_like(call):
    user_id = call.from_user.id
    message_id = call.message.id
    channel_id = call.data.split('_')[1]
    data = {
        'user_id': user_id,
        'message_id':message_id,
        'channel_id': channel_id,
        'rate': True
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url=f'{URL}/api/rate/', json=data) as response:
            if response.status == 201:
                await send_news(call)
            else:
                return logger.error(await response.text())


@bot.callback_query_handler(func=lambda call: call.data.startswith('nolike'))
async def on_nolike(call):
    user_id = call.from_user.id
    message_id = call.message.id
    channel_id = call.data.split('_')[1]
    data = {
        'user_id': user_id,
        'message_id':message_id,
        'channel_id': channel_id,
        'rate': False
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url=f'{URL}/api/rate/', json=data) as response:
            if response.status == 201:
                await send_news(call)
            else:
                return logger.error(await response.text())


@bot.callback_query_handler(func=lambda call: call.data == 'next')
async def next_news(call):
    await send_news(call)


@bot.message_handler(commands=['news'])
async def send_new(message):
    await send_news(message)


@bot.message_handler(commands=['changefilters'])
async def change_filters(message):
    '''–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiohttp.ClientSession() as session:
        async with session.get(url=f'{URL}/api/user/{user_id}') as response:
            if response.status == 200:
                existing_filters = (await response.json())['filters']
            elif response.status == 404:
                return await bot.send_message(
                    chat_id=chat_id, 
                    text='–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start'
                )
            else:
                return logger.error(await response.text())

    user_filters[user_id] = existing_filters

    markup = types.InlineKeyboardMarkup()
    buttons = []
    i = 0

    for _filter in news_filters[:8]:
        if _filter in existing_filters:
            i+=1
            buttons.append(types.InlineKeyboardButton(text=f'{_filter} ‚úÖ', callback_data=_filter))
        else:
            i+=1
            buttons.append(types.InlineKeyboardButton(text=_filter, callback_data=_filter))
        if i == 2:
            i = 0
            markup.row(*buttons)
            buttons = []
    markup.add(types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='changefilters'))

    await bot.send_message(chat_id, '–ò–∑–º–µ–Ω–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'changefilters')
async def change_filters_click_inline(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.id

    if not user_filters.get(user_id):
        return await bot.answer_callback_query(call.id, '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!')

    data = {
        'id': user_id,
        'filters': user_filters[user_id]
    }

    async with aiohttp.ClientSession() as session:
        async with session.put(url=f'{URL}/api/user/', json=data) as response:
            if response.status != 200:
                return logger.error(await response.text())

    await bot.answer_callback_query(call.id, text='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
    await bot.delete_message(chat_id, message_id)

    await send_news(call)


@bot.message_handler(content_types=["text"])
async def change_filters_click_inline(message):
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã":
        await change_filters(message)
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
        await send_new(message)
    user_id = message.from_user.id
    if message.text != "–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏" and message.text != "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã":
        await bot.send_message(user_id,"–°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç–∏, –∞ –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤—Ç—Ä–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é –º–∏—Ä :)",reply_markup=markup_button)


async def send_news(user):
    user_id = user['id']
    tags = user['filters']

    # –ü–æ–ª—É—á–∞–µ–º id –∫–∞–Ω–∞–ª–æ–≤
    data = {'tags': tags}
    async with aiohttp.ClientSession() as session:
        async with session.post(url=f'{URL}/api/channels/', json=data) as response:
            if response.status == 200:
                channels = (await response.json())['channels_ids']
            elif response.status == 404:
                return logger.error(f'–ö–∞–Ω–∞–ª—ã —Å —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {", ".join(tags)}')
            else:
                return logger.error(await response.text())

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton('‚ù§Ô∏è', callback_data='like'))
    markup.add(types.InlineKeyboardButton('üëé', callback_data='nolike'))
    markup.add(types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='next'))

    try:
        with open(path.join(path.dirname(path.abspath(__file__)),channels[randint(0,len(channels))]+str(randint(0,4))+'.json'), 'r', encoding='utf-8') as fh: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á—Ç–µ–Ω–∏–µ
            data = json.load(fh)
            if data["filename"] == "None":
                await bot.send_message(user_id, data['text'], reply_markup=markup)
            else:
                if path.join(path.dirname(path.abspath(__file__)), data['filename'])[-4:] == ".mp4":
                    await bot.send_video(user_id,open(path.join(path.dirname(path.abspath(__file__)), data['filename']), 'rb'), caption=data['text'], reply_markup=markup)           
                else:
    except Exception as e:
        logger.debug(e)
        await day_send_news(user_id)
    

async def day_news():
    while True:
        async with aiohttp.ClientSession() as session:
            async with session.get(url=f'{URL}/api/users/') as response:
                if response.status == 200:
                    users = await response.json()
                elif response.status == 404:
                    return logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    return logger.error(await response.text())

        for user in users:
            await send_news(user)
    
        asyncio.sleep(5)


loop = asyncio.get_event_loop()
asyncio.ensure_future(day_news())
asyncio.run(bot.polling())
